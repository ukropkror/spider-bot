import asyncio
import random
import pandas as pd
import openpyxl 
from telethon import TelegramClient, events
from datetime import datetime
from collections import deque
import threading
import re
import json
import os
from telethon.errors import UsernameInvalidError, UsernameNotOccupiedError, UserPrivacyRestrictedError, FloodWaitError, PeerFloodError


def is_qualified(user_id: str) -> bool:
    user_id = str(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º users_database.xlsx
    try:
        df_users = pd.read_excel("users_database.xlsx", header=None)
        for i in range(len(df_users)):
            if str(df_users.iloc[i, 0]) == user_id:
                # –£–∂–µ –µ—Å—Ç—å ‚Äî —Å—Ç–∞–≤–∏–º –Ω–µ–∫–≤–∞–ª
                wb = openpyxl.load_workbook("users_database.xlsx")
                ws = wb.active
                col_count = ws.max_column
                if col_count < 6:
                    ws.cell(row=i+1, column=6).value = "–ù–µ—Ç"
                wb.save("users_database.xlsx")
                return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å users_database.xlsx: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º leads.xlsx
    try:
        df_leads = pd.read_excel("leads.xlsx")
        match = df_leads[df_leads["ID"].astype(str) == user_id]
        if not match.empty:
            index = match.index[0]
            if match.iloc[0]["–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] is True:
                # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                wb = openpyxl.load_workbook("leads.xlsx")
                ws = wb.active
                if "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" not in df_leads.columns:
                    ws.cell(row=1, column=len(df_leads.columns)+1).value = "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
                ws.cell(row=index+2, column=df_leads.columns.get_loc("–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")+1).value = "–ù–µ—Ç"
                wb.save("leads.xlsx")
                return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å leads.xlsx: {e}")

    # –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî —Å—Ç–∞–≤–∏–º –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
    try:
        df_leads = pd.read_excel("leads.xlsx")
        match = df_leads[df_leads["ID"].astype(str) == user_id]
        if not match.empty:
            index = match.index[0]
            wb = openpyxl.load_workbook("leads.xlsx")
            ws = wb.active
            if "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" not in df_leads.columns:
                ws.cell(row=1, column=len(df_leads.columns)+1).value = "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            ws.cell(row=index+2, column=df_leads.columns.get_loc("–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")+1).value = "–î–∞"
            wb.save("leads.xlsx")
    except:
        pass

    return True

# === –û—á–µ—Ä–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
message_queue = deque()
priority_queue = deque()
regular_queue = deque()
use_priority = True

last_sent_per_chat = {}
sent_messages_count = 0

# === –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
with open("settings.json", "r", encoding="utf-8") as f:
    config = json.load(f)

API_ID = config["API_ID"]
API_HASH = config["API_HASH"]
FORWARD_TO_USER = config["FORWARD_TO_USER"]
SESSION_NAME = "session_name"

client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–æ–≤ ===
def load_list(filename):
    with open(filename, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

TARGET_CHATS = list(map(int, load_list("target_chats.txt")))
GROUP_IDS = list(map(int, load_list("group_ids.txt")))
KEYWORDS_SET_1 = load_list("keywords_1.txt")
KEYWORDS_SET_2 = load_list("keywords_2.txt")
STOP_WORDS = load_list("stop_words.txt")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
DB_FILE = "users_database.xlsx"
try:
    df = pd.read_excel(DB_FILE)
except FileNotFoundError:
    df = pd.DataFrame(columns=["–ò—Å—Ç–æ—á–Ω–∏–∫", "–ù–∏–∫", "–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–ë—ã–ª –ª–∏ –≤ –±–∞–∑–µ"])

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
def clean_text(text):
    return re.sub(r'[*_~`"]', "", text).lower()

def is_user_in_db(username):
    return username in df["–ù–∏–∫"].values

def can_write_user(username, raw_text):
    if username not in df["–ù–∏–∫"].values:
        recent_entries = df[df["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"] >= (datetime.now() - pd.Timedelta(days=5)).strftime("%Y-%m-%d %H:%M:%S")]
        if raw_text in recent_entries["–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞"].values:
            return False
        return True

    user_entries = df[df["–ù–∏–∫"] == username]
    last_date_str = user_entries["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"].max()
    last_date = datetime.strptime(last_date_str, "%Y-%m-%d %H:%M:%S")
    if (datetime.now() - last_date).days < 30:
        return False

    recent_entries = df[df["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"] >= (datetime.now() - pd.Timedelta(days=5)).strftime("%Y-%m-%d %H:%M:%S")]
    if raw_text in recent_entries["–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞"].values:
        return False

    return True

def log_message(source, username, text, was_in_db, user_id, sent=False):
    new_entry = {
        "–ò—Å—Ç–æ—á–Ω–∏–∫": source,
        "–ù–∏–∫": username,
        "–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞": text,
        "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "–ë—ã–ª –ª–∏ –≤ –±–∞–∑–µ": "–î–∞" if was_in_db else "–ù–µ—Ç",
        "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": "–î–∞" if sent else "–ù–µ—Ç"
    }
    global df
    new_entry["–ù–∏–∫"] = username if username else user_id
    df = pd.concat([df, pd.DataFrame([new_entry])], ignore_index=True)
    with pd.ExcelWriter(DB_FILE, mode="w", engine="openpyxl") as writer:
        df.to_excel(writer, index=False)


def get_username_by_id(user_id: str) -> str:
    user_id = str(user_id)

    try:
        df_leads = pd.read_excel("leads.xlsx")
        match = df_leads[df_leads["ID"].astype(str) == user_id]
        if not match.empty and "–Æ–∑–µ—Ä–Ω–µ–π–º" in match.columns:
            username = str(match.iloc[0]["–Æ–∑–µ—Ä–Ω–µ–π–º"])
            print(f"üîé –ù–∞–π–¥–µ–Ω username –¥–ª—è ID {user_id}: {username}")
            if isinstance(username, str) and username.strip():
                return username
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å leads.xlsx: {e}")

    try:
        df_users = pd.read_excel("users_database.xlsx", header=None)
        for i in range(len(df_users)):
            if str(df_users.iloc[i, 0]) == user_id:
                username = str(df_users.iloc[i, 1])
                if isinstance(username, str) and username.strip():
                    return username
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å users_database.xlsx: {e}")

    return ""

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ –≤ —Å–≤–æ–π —á–∞—Ç ===
async def forward_lead_info(chat, username, raw_text, source="–ß–∞—Ç", keywords=None):
    found_keywords = ", ".join(keywords) if keywords else "-"
    msg = (
        f"üìç –ù–æ–≤—ã–π –ª–∏–¥ –∏–∑ {source}\n"
        f"üîó –ß–∞—Ç: {chat}\n"
        f"üë§ @{username}\n"
        f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}\n\n"
        f"üí¨ <pre>{raw_text}</pre>"
    )
    await client.send_message(FORWARD_TO_USER, msg, parse_mode="html")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ª–∏–¥–æ–≤ –∏–∑ leads.xlsx ===
def load_leads_from_excel():
    for _, row in df.iterrows():
        # 1. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if str(row.get("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "")).strip().lower() == "–¥–∞":
            continue

        # 2. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —è–≤–Ω–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ –∫–≤–∞–ª
        if str(row.get("–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "")).strip().lower() == "–Ω–µ –∫–≤–∞–ª":
            continue
    try:
        df_leads = pd.read_excel("leads.xlsx")
        unsent = df_leads[
            (df_leads["–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] == "–ù–µ—Ç") &
            (~df_leads.get("–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "").astype(str).str.lower().eq("–Ω–µ –∫–≤–∞–ª"))
        ]

        # –°–æ–±–µ—Ä—ë–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–¥—ã –≤ –æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        already_in_queue = {(uid, text) for uid, _, text in priority_queue}

        added_count = 0
        for _, row in unsent.iterrows():
            lead_key = (row["ID"], row["–¢–µ–∫—Å—Ç"])
            if lead_key in already_in_queue:
                continue  # —É–∂–µ –µ—Å—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            lead = (
                row["ID"],
                config["CHAT_INTRO_MESSAGE"].format(chat=row["–ß–∞—Ç"]),
                row["–¢–µ–∫—Å—Ç"]
            )
            priority_queue.append(lead)
            added_count += 1

        if added_count > 0:
            print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –∏–∑ leads.xlsx")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–¥–æ–≤ –∏–∑ Excel: {e}")

async def send_intro_and_raw(client, recipient, intro_message, raw_text):
    try:
        await client.send_message(recipient, intro_message)
        print(f"‚úÖ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ -> {recipient}")
        await asyncio.sleep(1)
        await client.send_message(recipient, f"<pre>{raw_text}</pre>", parse_mode="html")
        print(f"‚úÖ raw_text –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω -> {recipient}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ intro/raw_text -> {recipient}: {e}")
        return False
    

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ===
async def process_queue():
    global sent_messages_count, use_priority
    send_success = False
    while True:
        if message_queue:
            user_id, intro_message, raw_text = message_queue.popleft()
        elif use_priority and priority_queue:
            user_id, intro_message, raw_text = priority_queue.popleft()
            use_priority = False
        elif regular_queue:
            user_id, intro_message, raw_text = regular_queue.popleft()
            use_priority = True
        elif priority_queue:
            user_id, intro_message, raw_text = priority_queue.popleft()
            use_priority = False
        else:
            await asyncio.sleep(10)
            continue

        try:
            await asyncio.sleep(random.randint(
                config["DELAY_BETWEEN_MESSAGES_MIN"],
                config["DELAY_BETWEEN_MESSAGES_MAX"]
            ))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é
            if not is_qualified(user_id):
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue  # —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            # ‚õîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ ‚Äî –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–π —Ç–µ–∫—Å—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            try:
                df_leads = pd.read_excel("leads.xlsx")
                existing_texts = df_leads[df_leads["–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] == "–î–∞"]["–¢–µ–∫—Å—Ç"].tolist()
                if any(raw_text.strip() == t.strip() for t in existing_texts if len(t.strip()) > 50):
                    print(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ ‚Äî —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ä–∞–Ω—å—à–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    # ‚õîÔ∏è –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ª–∏–¥ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç (–¥—É–±–ª–∏–∫–∞—Ç —Ç–µ–∫—Å—Ç–∞)
                    try:
                        idx = df_leads[(df_leads["ID"] == user_id) & (df_leads["–¢–µ–∫—Å—Ç"] == raw_text)].index
                        if not idx.empty:
                            df_leads.loc[idx[0], "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] = "–ù–µ—Ç"
                            df_leads.loc[idx[0], "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"] = "–ù–µ –∫–≤–∞–ª"
                            df_leads.to_excel("leads.xlsx", index=False)
                            print(f"‚õîÔ∏è –õ–∏–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–ù–µ –∫–≤–∞–ª' ‚Äî –¥—É–±–ª–∏–∫–∞—Ç —Ç–µ–∫—Å—Ç–∞")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –ª–∏–¥ –∫–∞–∫ '–ù–µ –∫–≤–∞–ª': {e}")
                         # ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Äî –ø–æ–º–µ—á–∞–µ–º –≤ leads.xlsx –∫–∞–∫ "–ù–µ –∫–≤–∞–ª"
                        try:
                            df_leads = pd.read_excel("leads.xlsx")
                            idx = df_leads[
                                (df_leads["ID"].astype(str) == str(user_id)) &
                                (df_leads["–¢–µ–∫—Å—Ç"] == raw_text)
                            ].index
                            if not idx.empty:
                                df_leads.loc[idx[0], "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"] = "–ù–µ –∫–≤–∞–ª"
                                df_leads.to_excel("leads.xlsx", index=False)
                                print(f"‚õîÔ∏è –õ–∏–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–ù–µ –∫–≤–∞–ª' ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
                        except Exception as save_err:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ '–ù–µ –∫–≤–∞–ª': {save_err}")
                    continue
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç: {e}")
            if config.get("SEND_MESSAGES", True):
                # ‚õîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —ç—Ç–æ—Ç –ª–∏–¥ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                try:
                    # üîé –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–º—É ID –∏–ª–∏ —Ç–µ–∫—Å—Ç?
                    try:
                        df_leads = pd.read_excel("leads.xlsx")
                        df_users = pd.read_excel("users_database.xlsx", header=None) if os.path.exists("users_database.xlsx") else pd.DataFrame()

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID
                        if str(user_id) in df_users[0].astype(str).values:
                            print(f"‚õîÔ∏è –£–∂–µ –ø–∏—Å–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ '–ù–µ –∫–≤–∞–ª'")
                            idx = df_leads[(df_leads["ID"].astype(str) == str(user_id)) & (df_leads["–¢–µ–∫—Å—Ç"] == raw_text)].index
                            if not idx.empty:
                                df_leads.loc[idx[0], "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"] = "–ù–µ –∫–≤–∞–ª"
                                df_leads.to_excel("leads.xlsx", index=False)
                            continue

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
                        sent_texts = df_leads[df_leads["–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] == "–î–∞"]["–¢–µ–∫—Å—Ç"].dropna().astype(str).str.strip().tolist()
                        if any(raw_text.strip() == t.strip() for t in sent_texts if len(t.strip()) >= 60):
                            print("‚õîÔ∏è –ü–æ–≤—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ '–ù–µ –∫–≤–∞–ª'")
                            idx = df_leads[(df_leads["ID"].astype(str) == str(user_id)) & (df_leads["–¢–µ–∫—Å—Ç"] == raw_text)].index
                            if not idx.empty:
                                df_leads.loc[idx[0], "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"] = "–ù–µ –∫–≤–∞–ª"
                                df_leads.to_excel("leads.xlsx", index=False)
                            continue

                        # –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –ø–æ–º–µ—á–∞–µ–º '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è' = '–î–∞'
                        idx = df_leads[(df_leads["ID"].astype(str) == str(user_id)) & (df_leads["–¢–µ–∫—Å—Ç"] == raw_text)].index
                        if not idx.empty:
                            df_leads.loc[idx[0], "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"] = "–î–∞"
                            df_leads.to_excel("leads.xlsx", index=False)

                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID/—Ç–µ–∫—Å—Ç–∞: {e}")
                    df_leads = pd.read_excel("leads.xlsx")
                    mask = (df_leads["ID"] == user_id) & (df_leads["–¢–µ–∫—Å—Ç"] == raw_text)
                    if not df_leads[mask].empty and df_leads.loc[mask, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"].values[0] == "–î–∞":
                        print(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä ‚Äî –ª–∏–¥ —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (ID: {user_id}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –≤ leads.xlsx: {e}")

                # ‚õîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ users_database.xlsx ‚Äî –µ—Å–ª–∏ ID + —Ç–µ–∫—Å—Ç —É–∂–µ –ª–æ–≥–∏—Ä–æ–≤–∞–ª–∏—Å—å
                try:
                    df_users = pd.read_excel("users_database.xlsx", header=None)
                    if not df_users.empty:
                        id_col = df_users.columns[0]
                        text_col = df_users.columns[2]
                        duplicates = df_users[
                            (df_users[id_col].astype(str) == str(user_id)) &
                            (df_users[text_col] == raw_text)
                        ]
                        if not duplicates.empty:
                            print(f"‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å —ç—Ç–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ –≤ users_database.xlsx, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –≤ users_database.xlsx: {e}")
                # –û–±–Ω–æ–≤–∏–º users_database.xlsx (–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω = –î–∞)
                try:
                    df_users = pd.read_excel("users_database.xlsx", header=None)
                    for i in range(len(df_users)):
                        if str(df_users.iloc[i, 0]) == str(user_id):
                            wb = openpyxl.load_workbook("users_database.xlsx")
                            ws = wb.active
                            col_count = ws.max_column
                            if col_count < 6:
                                ws.cell(row=i+1, column=6).value = "–î–∞"
                            wb.save("users_database.xlsx")
                            break
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ users_database.xlsx: {e}")

                # –û–±–Ω–æ–≤–∏–º leads.xlsx (–µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–º –µ—Å—Ç—å)
                try:
                    df_leads = pd.read_excel("leads.xlsx")
                    match = df_leads[df_leads["ID"].astype(str) == str(user_id)]
                    if not match.empty:
                        index = match.index[0]
                        wb = openpyxl.load_workbook("leads.xlsx")
                        ws = wb.active
                        if "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" not in df_leads.columns:
                            ws.cell(row=1, column=len(df_leads.columns)+1).value = "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
                        ws.cell(row=index+2, column=df_leads.columns.get_loc("–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")+1).value = "–î–∞"
                        wb.save("leads.xlsx")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ leads.xlsx: {e}")
                

                try:
                    send_success = await send_intro_and_raw(client, user_id, intro_message, raw_text)
                    if not send_success:
                        raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ user_id ‚Äî –ø—Ä–æ–±—É–µ–º username")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ ID: {e}")
                    username = get_username_by_id(user_id)
                    if username:
                        if not username.startswith("@"):
                            username = f"@{username}"
                        try:
                            send_success = await send_intro_and_raw(client, username, intro_message, raw_text)
                            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ username {username}")
                        except Exception as uname_err:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ username: {uname_err}")

                    # ‚õîÔ∏è –í–ù–ò–ú–ê–ù–ò–ï: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ send_success –≤—Å—ë –µ—â—ë False ‚Äî —Å—Ç–∞–≤–∏–º "–Ω–µ –∫–≤–∞–ª"
                    if not send_success:
                        try:
                            df_leads = pd.read_excel("leads.xlsx")
                            idx = df_leads[
                                (df_leads["ID"].astype(str) == str(user_id)) &
                                (df_leads["–¢–µ–∫—Å—Ç"] == raw_text)
                            ].index
                            if not idx.empty:
                                df_leads.loc[idx[0], "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"] = "–ù–µ –∫–≤–∞–ª"
                                df_leads.to_excel("leads.xlsx", index=False)
                                print(f"‚õîÔ∏è –õ–∏–¥ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–ù–µ –∫–≤–∞–ª' ‚Äî –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
                        except Exception as save_err:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ '–ù–µ –∫–≤–∞–ª': {save_err}")


                if send_success:
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                # ‚úÖ –õ–æ–≥ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —á–∞—Ç
                username = get_username_by_id(user_id) if 'get_username_by_id' in globals() else str(user_id)
                if username:
                    id_line = f"üë§ ID: {user_id} @{username}"
                else:
                    id_line = f"üë§ ID: {user_id}"

                await client.send_message(
                    FORWARD_TO_USER,
                    f"üü¢ –õ–∏–¥ ({'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' if send_success else '—Ç–æ–ª—å–∫–æ –ª–æ–≥'})\n\n"
                    f"{id_line}\n"
                    f"üí¨ <pre>{raw_text}</pre>\n"
                    f"üì¶ –ò–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ {'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if send_success else '–ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'})",
                    parse_mode="html"
                )

            else:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ username –≤ leads.xlsx –∏–ª–∏ users_database.xlsx
                

                username = get_username_by_id(user_id)
                id_line = f"üë§ @{username} (ID: {user_id})" if username else f"üë§ ID: {user_id}"

                await client.send_message(
                    FORWARD_TO_USER,
                    f"üü¢ –õ–∏–¥ (—Ç–æ–ª—å–∫–æ –ª–æ–≥)\n\n"
                    f"{id_line}\n"
                    f"üí¨ <pre>{raw_text}</pre>\n"
                    f"üì¶ –ò–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)",
                    parse_mode="html"
                )

                print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úèÔ∏è –õ–∏–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)")
            if send_success:
                print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            sent_messages_count += 1

            try:
                df_leads = pd.read_excel("leads.xlsx")
                mask = (df_leads["ID"] == user_id) & (df_leads["–¢–µ–∫—Å—Ç"] == raw_text)
                df_leads.loc[mask, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"] = "–î–∞"
                with pd.ExcelWriter("leads.xlsx", mode="w", engine="openpyxl") as writer:
                    df_leads.to_excel(writer, index=False)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å leads.xlsx: {e}")

        except FloodWaitError as e:
            print(f"‚è≥ FloodWaitError: –ø–æ–¥–æ–∂–¥—ë–º {e.seconds} —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(e.seconds)
        except PeerFloodError:
            print("üö® PeerFloodError: Telegram –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            exit()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            if not send_success:
                print(f"‚õîÔ∏è –õ–∏–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚Äî –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ '–ù–µ –∫–≤–∞–ª'")
                # –∑–∞–ø–∏—Å—å –≤ leads.xlsx
                try:
                    df_leads = pd.read_excel("leads.xlsx")
                    idx = df_leads[
                        (df_leads["ID"].astype(str) == str(user_id)) &
                        (df_leads["–¢–µ–∫—Å—Ç"] == raw_text)
                    ].index
                    if not idx.empty:
                        df_leads.loc[idx[0], "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"] = "–ù–µ –∫–≤–∞–ª"
                        df_leads.to_excel("leads.xlsx", index=False)
                        print("‚ùå –ó–∞–ø–∏—Å–∞–ª–∏ '–ù–µ –∫–≤–∞–ª' –≤ leads.xlsx")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ '–ù–µ –∫–≤–∞–ª': {e}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥—Ä—É–ø–ø ===
@client.on(events.NewMessage(chats=GROUP_IDS))
async def group_handler(event):
    raw_text = event.message.message
    message_text = clean_text(raw_text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
    if any(stop_word in message_text for stop_word in STOP_WORDS):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–±–æ–∏—Ö –Ω–∞–±–æ—Ä–æ–≤
    if not (any(word in message_text for word in KEYWORDS_SET_1) and
            any(word in message_text for word in KEYWORDS_SET_2)):
        return

    # –ù–∞–π–¥—ë–º –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    matched_1 = [word for word in KEYWORDS_SET_1 if word in message_text]
    matched_2 = [word for word in KEYWORDS_SET_2 if word in message_text]
    matched_keywords = matched_1 + matched_2

    # –ò—â–µ–º –≤—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ usernames –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    usernames = set(re.findall(r"(?:@|https?://)?t\.me/([a-zA-Z0-9_]+)", raw_text)) | \
            set(re.findall(r"@([a-zA-Z0-9_]+)", raw_text))

    for uname in usernames:
        if is_user_in_db(uname):
            continue
        try:
            user = await client.get_entity(uname)
            chat_name = (await event.get_chat()).title
            intro = config["GROUP_INTRO_MESSAGE"].format(chat=chat_name)
            log_message("–ì—Ä—É–ø–ø–∞", uname, raw_text, was_in_db=False, user_id=user.id, sent=False)
            message_queue.append((user.id, intro, raw_text))
            await forward_lead_info(chat_name, uname, raw_text, source="–ß–∞—Ç", keywords=matched_keywords)
            print(f"üìå –ù–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ: @{uname}")
        except (UsernameInvalidError, UsernameNotOccupiedError, UserPrivacyRestrictedError) as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å @{uname}: {e}")
            continue

@client.on(events.NewMessage(chats=FORWARD_TO_USER))
async def command_handler(event):
    text = event.raw_text.strip().lower()

    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–±–∞–Ω ", –¥–æ–±–∞–≤–∏–º —Å–ª–æ–≤–æ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç
    if text.startswith("–±–∞–Ω "):
        new_word = text.replace("–±–∞–Ω ", "").strip()

        if not new_word:
            await event.reply("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è –±–∞–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –≤ —Å—Ç–æ–ø-–ª–∏—Å—Ç–µ –ª–∏ —É–∂–µ
        if new_word in STOP_WORDS:
            await event.reply(f"‚õî –°–ª–æ–≤–æ ¬´{new_word}¬ª —É–∂–µ –≤ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞—Ö.")
            return

        # –î–æ–±–∞–≤–∏–º –≤ —Ñ–∞–π–ª
        with open("stop_words.txt", "a", encoding="utf-8") as f:
            f.write(f"\n{new_word}")
        STOP_WORDS.append(new_word)

        await event.reply(f"‚úÖ –°–ª–æ–≤–æ ¬´{new_word}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞.")
        
    # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ", –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ KEYWORDS_2
    elif text.startswith("–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ "):
        new_word = text.replace("–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "").strip()

        if not new_word:
            await event.reply("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ KEYWORDS_2.")
            return

        if new_word in KEYWORDS_SET_2:
            await event.reply(f"‚õî –°–ª–æ–≤–æ ¬´{new_word}¬ª —É–∂–µ –µ—Å—Ç—å –≤ KEYWORDS_2.")
            return

        with open("keywords_2.txt", "a", encoding="utf-8") as f:
            f.write(f"\n{new_word}")
        KEYWORDS_SET_2.append(new_word)

        await event.reply(f"‚úÖ –°–ª–æ–≤–æ ¬´{new_word}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ KEYWORDS_2.")


@client.on(events.NewMessage(chats=TARGET_CHATS))
async def chat_handler(event):
    chat_name = (await event.get_chat()).title
    now = datetime.now()

    last_time = last_sent_per_chat.get(chat_name)
    if last_time and (now - last_time).total_seconds() < 900:  # 15 –º–∏–Ω—É—Ç
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ

    # –ï—Å–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
    last_sent_per_chat[chat_name] = now
    raw_text = event.message.message
    message_text = clean_text(raw_text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
    if any(stop_word in message_text for stop_word in STOP_WORDS):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–±–æ–∏—Ö –Ω–∞–±–æ—Ä–æ–≤
    if not (any(word in message_text for word in KEYWORDS_SET_1) and
            any(word in message_text for word in KEYWORDS_SET_2)):
        return

    # –ù–∞–π–¥—ë–º –∫–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    matched_1 = [word for word in KEYWORDS_SET_1 if word in message_text]
    matched_2 = [word for word in KEYWORDS_SET_2 if word in message_text]
    matched_keywords = matched_1 + matched_2

    # –ò—â–µ–º usernames –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    usernames = set(re.findall(r"(?:@|https?://)?t\.me/([a-zA-Z0-9_]+)", raw_text)) | \
            set(re.findall(r"@([a-zA-Z0-9_]+)", raw_text))

    # –ï—Å–ª–∏ –µ—Å—Ç—å usernames ‚Äî –ø–∏—à–µ–º –∏–º
    if usernames:
        for uname in usernames:
            if is_user_in_db(uname):
                continue
            try:
                user = await client.get_entity(uname)
                chat_name = (await event.get_chat()).title
                intro = config["CHAT_INTRO_MESSAGE"].format(chat=chat_name)
                log_message(chat_name, uname, raw_text, was_in_db=False, user_id=user.id, sent=False)
                message_queue.append((user.id, intro, raw_text))
                await forward_lead_info(chat_name, uname, raw_text, source="–ß–∞—Ç", keywords=matched_keywords)
                print(f"üü¢ –õ–∏–¥ –∏–∑ —á–∞—Ç–∞ (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ): @{uname} ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
            except (UsernameInvalidError, UsernameNotOccupiedError, UserPrivacyRestrictedError) as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å @{uname}: {e}")
                continue
    else:
        # –ï—Å–ª–∏ usernames –Ω–µ—Ç ‚Äî –ø–∏—à–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        sender = await event.get_sender()
        if sender is None:
            return
        username = sender.username or sender.id
        if not can_write_user(username, raw_text):
            return
        chat_name = (await event.get_chat()).title
        intro = config["CHAT_INTRO_MESSAGE"].format(chat=chat_name)
        log_message(chat_name, username, raw_text, was_in_db=False, user_id=sender.id, sent=False)
        # –û–±–Ω–æ–≤–∏–º users_database.xlsx (–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω = –î–∞)
        message_queue.append((sender.id, intro, raw_text))
        print(f"üü¢ –õ–∏–¥ –∏–∑ —á–∞—Ç–∞ (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å): @{username} ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")




async def periodic_leads_loader():
    while True:
        print("üîÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ª–∏–¥–æ–≤ –≤ leads.xlsx...")
        load_leads_from_excel()
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
async def periodic_stop_words_updater():
    global STOP_WORDS
    while True:
        try:
            with open("stop_words.txt", "r", encoding="utf-8") as f:
                STOP_WORDS = [line.strip() for line in f if line.strip()]
            print("üîÑ –°—Ç–æ–ø-—Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞: {e}")
        await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

def update_qualification_for_all():
    try:
        df_leads = pd.read_excel("leads.xlsx")
        if "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω" not in df_leads.columns:
            df_leads["–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"] = ""

        for index, row in df_leads.iterrows():
            –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ = str(row.get("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "")).strip().lower()
            –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è = str(row.get("–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è", "")).strip().lower()

            if –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ == "–¥–∞" or –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è == "–Ω–µ –∫–≤–∞–ª":
                df_leads.at[index, "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"] = "–ù–µ—Ç"
            else:
                df_leads.at[index, "–ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"] = "–î–∞"

        df_leads.to_excel("leads.xlsx", index=False)
        print("‚úÖ –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ leads.xlsx")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ª–∏–¥–æ–≤: {e}")


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    await client.start()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —á–∞—Ç—ã, –≥—Ä—É–ø–ø—ã –∏ –ª–∏–¥—ã –∏–∑ Excel...")
    update_qualification_for_all()
    load_leads_from_excel()
    asyncio.create_task(process_queue())
    asyncio.create_task(periodic_leads_loader())
    asyncio.create_task(periodic_stop_words_updater())
    try:
        await client.run_until_disconnected()
    except Exception as e:
        if "PersistentTimestampOutdatedError" not in str(e):
            print(f"üö® –û—à–∏–±–∫–∞: {e}")
        else:
            pass  # –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º PersistentTimestampOutdatedError


    

asyncio.run(main())