# 1. –ò–º–ø–æ—Ä—Ç—ã

# === –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ ===
import asyncio
import json
import logging
import os
import re
import openpyxl
from datetime import datetime, timedelta
from typing import List

# === –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ===
import pandas as pd
import matplotlib.pyplot as plt
from telethon import TelegramClient, events

# === –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ ===
# –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

# 2. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ


# === –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º ===
PROJECT_PATH = "projects"
STOP_WORDS_PATH = "core/stop_words.txt"
SENT_MESSAGES_PATH = "core/sent_messages.xlsx"
KEYWORDS1_MESSAGES_PATH = "core/keywords1_messages.xlsx"
STATS_HOURLY_MAIN_PATH = "core/stats_hourly_main.json"
STATS_HOURLY_TEST_PATH = "core/stats_hourly_test.json"
TEST_STATUS_PATH = "core/testprojectstatus.json"
DEFAULT_TEST_LIMIT = 10

# === –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ===
MAX_MESSAGE_LENGTH = 500
STOPWORDS_REFRESH_INTERVAL = 3600  # —Å–µ–∫ (1 —á–∞—Å)
CHATS_REFRESH_INTERVAL = 3600      # —Å–µ–∫ (1 —á–∞—Å)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
last_stopwords_update = datetime.min  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-—Å–ª–æ–≤
last_sources_update = datetime.min    # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤

# === –°–ª—É–∂–µ–±–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
sent_message_ids = set()                 # ID —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
sent_texts_keywords1 = set()            # –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ KEYWORDS_1 (–¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–µ–π)

# === –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞ (—Å–±—Ä–æ—Å –∫–∞–∂–¥—ã–π —á–∞—Å) ===
messages_analyzed = 0                   # –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
messages_matched = 0                    # –ü–æ–¥–æ—à–ª–æ –ø–æ KEYWORDS_1 + KEYWORDS_2
messages_matched_keywords1 = 0          # –ü–æ–¥–æ—à–ª–æ –ø–æ —Ç–æ–ª—å–∫–æ KEYWORDS_1

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤ ===
try:
    STOP_WORDS = [line.strip().lower() for line in open(STOP_WORDS_PATH, encoding="utf-8") if line.strip()]
    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(STOP_WORDS)} —Å—Ç–æ–ø-—Å–ª–æ–≤")
except Exception as e:
    STOP_WORDS = []
    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞: {e}")

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ ===
try:
    df_sent = pd.read_excel(SENT_MESSAGES_PATH)
    sent_texts_keywords1 = set(df_sent["–¢–µ–∫—Å—Ç"].dropna().str.lower())
    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sent_texts_keywords1)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ sent_messages.xlsx")
except FileNotFoundError:
    df_sent = pd.DataFrame(columns=["–î–∞—Ç–∞", "–¢–µ–∫—Å—Ç"])
    logging.warning("‚ö†Ô∏è –§–∞–π–ª sent_messages.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞.")




# 3. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞

# === –ó–∞–≥—Ä—É–∑–∫–∞ settings.json ===
try:
    with open("core/settings.json", "r", encoding="utf-8") as f:
        config = json.load(f)
        logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ settings.json")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ settings.json: {e}")
    config = {}


# === –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ config ===
API_ID = config.get("API_ID")
API_HASH = config.get("API_HASH")
BOT_TOKEN = config.get("BOT_TOKEN")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
def get_available_projects() -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤–Ω—É—Ç—Ä–∏ projects"""
    try:
        return [
            d
            for d in os.listdir(PROJECT_PATH)
            if os.path.isdir(os.path.join(PROJECT_PATH, d))
        ]
    except Exception as exc:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤: {exc}")
        return []



def detect_active_project() -> str:
"""–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —á–∏—Ç–∞—è core/project_config.json"""
    default_project = config.get("PROJECT", "default")
    project = default_project

    project_config_path = os.path.join("core", "project_config.json")
    if os.path.exists(project_config_path):
        try:
            with open(project_config_path, "r", encoding="utf-8") as f:
                project_cfg = json.load(f)
            except Exception as exc:
            logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ project_config.json: %s", exc)
        else:
            if isinstance(project_cfg, dict):
                project = project_cfg.get("project", default_project)
            elif isinstance(project_cfg, list) and project_cfg:
                project = project_cfg[0]
            elif isinstance(project_cfg, str):
                project = project_cfg

    available = get_available_projects()
    if available:
        if project not in available:
            logging.warning(
                f"‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç '{project}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è '{available[0]}'"
            )
            project = available[0]
    else:
        logging.warning(
            "‚ö†Ô∏è –í –ø–∞–ø–∫–µ projects –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'default'"
        )

    return project


PROJECT = detect_active_project()

TEST_LIMIT = config.get("test_limit", DEFAULT_TEST_LIMIT)
TEST_MODE = config.get("test_mode", False)

# === –ü—É—Ç–∏ –¥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ===
KEYWORDS_1_PATH = f"{PROJECT_PATH}/{PROJECT}/keywords_1.txt"
KEYWORDS_2_PATH = f"{PROJECT_PATH}/{PROJECT}/keywords_2.txt"
STOP_WORDS_PROJECT_PATH = f"{PROJECT_PATH}/{PROJECT}/stop_words.txt"

def load_words_from_file(path: str) -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        with open(path, encoding="utf-8") as f:
            words = [line.strip().lower() for line in f if line.strip()]
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –∏–∑ {path}")
        return words
    except FileNotFoundError:
        logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
        return []

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ ===
KEYWORDS_1 = load_words_from_file(KEYWORDS_1_PATH)
KEYWORDS_2 = load_words_from_file(KEYWORDS_2_PATH)
STOP_WORDS_PROJECT = load_words_from_file(STOP_WORDS_PROJECT_PATH)

# === ID –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ ===
ADMIN_CHAT_ID = config.get("ADMIN_CHAT_ID")
ADMIN_TEST_CHAT_ID = config.get("ADMIN_TEST_CHAT_ID") 

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ===
if not all([API_ID, API_HASH]):
    logging.error("‚ùå –í settings.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!")
else:
    logging.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{PROJECT}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (test_mode={TEST_MODE})")





# === –ü—É—Ç–∏ –¥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ===
KEYWORDS_1_PATH = f"{PROJECT_PATH}/{PROJECT}/keywords_1.txt"
KEYWORDS_2_PATH = f"{PROJECT_PATH}/{PROJECT}/keywords_2.txt"
STOP_WORDS_PROJECT_PATH = f"{PROJECT_PATH}/{PROJECT}/stop_words.txt"

def load_words_from_file(path: str) -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        with open(path, encoding="utf-8") as f:
            words = [line.strip().lower() for line in f if line.strip()]
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –∏–∑ {path}")
        return words
    except FileNotFoundError:
        logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path}: {e}")
        return []

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ ===
KEYWORDS_1 = load_words_from_file(KEYWORDS_1_PATH)
KEYWORDS_2 = load_words_from_file(KEYWORDS_2_PATH)
STOP_WORDS_PROJECT = load_words_from_file(STOP_WORDS_PROJECT_PATH)

# === ID –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ ===
ADMIN_CHAT_ID = config.get("ADMIN_CHAT_ID")
ADMIN_TEST_CHAT_ID = config.get("ADMIN_TEST_CHAT_ID") 

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ===
if not all([API_ID, API_HASH]):
    logging.error("‚ùå –í settings.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!")
else:
    logging.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '{PROJECT}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (test_mode={TEST_MODE})")

# === –ü—É—Ç–∏ –¥–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ===
KEYWORDS_1_PATH = f"{PROJECT_PATH}/{PROJECT}/keywords_1.txt"
KEYWORDS_2_PATH = f"{PROJECT_PATH}/{PROJECT}/keywords_2.txt"
STOP_WORDS_PROJECT_PATH = f"{PROJECT_PATH}/{PROJECT}/stop_words.txt"
TARGET_CHATS_MAIN_PATH = f"{PROJECT_PATH}/{PROJECT}/target_chats.txt"
TARGET_CHATS_TEST_PATH = f"{PROJECT_PATH}/{PROJECT}/target_chats_test.txt"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞ ===
SESSION_NAME = config.get("SESSION_NAME", "session_name")
client = TelegramClient(SESSION_NAME, API_ID, API_HASH)

# === –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ===
logging.info("üì≤ TelegramClient —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# === ID –±–æ—Ç–æ–≤ ===
def load_bot_ids(path: str = "core/bot_ids.txt") -> list[int]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Telegram bot ID –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(path, encoding="utf-8") as f:
            ids = [int(line.strip()) for line in f if line.strip().isdigit()]
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ids)} bot ID –∏–∑ {path}")
        return ids
    except FileNotFoundError:
        logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ bot ID: {e}")
        return []

TELEGRAM_BOT_IDS = load_bot_ids()
















# 4. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def normalize_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å—Å—ã–ª–æ–∫, —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    clean = re.sub(r"[^\w\s@.]", " ", text)
    return re.sub(r"\s+", " ", clean).strip().lower()

def update_hourly_statistics(project: str, test_mode: bool):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—á—ë—Ç–∞"""
    stats_file = STATS_HOURLY_TEST_PATH if test_mode else STATS_HOURLY_MAIN_PATH
    now = datetime.now().replace(minute=0, second=0, microsecond=0)
    try:
        if os.path.exists(stats_file):
            with open(stats_file, "r", encoding="utf-8") as f:
                stats = json.load(f)
        else:
            stats = {}

        now_str = now.isoformat()
        stats[now_str] = stats.get(now_str, 0) + 1

        with open(stats_file, "w", encoding="utf-8") as f:
            json.dump(stats, f, ensure_ascii=False, indent=2)
        logging.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {now_str} (+1)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def is_duplicate_message(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø–æ —Ç–µ–∫—Å—Ç—É)"""
    return text in sent_texts_keywords1

def load_json_file(file_path: str) -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON –∏–∑ {file_path}: {e}")
        return {}

def save_message_to_excel(message: str, file_path: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Excel-—Ñ–∞–π–ª (–¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü)"""
    try:
        df = pd.read_excel(file_path) if os.path.exists(file_path) else pd.DataFrame(columns=["–î–∞—Ç–∞", "–¢–µ–∫—Å—Ç"])
        new_row = {"–î–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d %H:%M:%S"), "–¢–µ–∫—Å—Ç": message}
        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
        df.to_excel(file_path, index=False)
        logging.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_path}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def read_and_clear_hourly_stats(file_path: str) -> dict:
    """–ß–∏—Ç–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç json-—Ñ–∞–π–ª –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        if os.path.exists(file_path):
            with open(file_path, "r", encoding="utf-8") as f:
                stats = json.load(f)
            os.remove(file_path)
            logging.info(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–∞ –∏ –æ—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ {file_path}")
            return stats
        else:
            return {}
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ hourly stats: {e}")
        return {}

async def log_lead_to_admin_chat(event, matched_keywords: list[str]):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ª–∏–¥–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç"""
    try:
        text = event.message.message or ""
        user = await event.get_sender()
        if user.id in TELEGRAM_BOT_IDS:
            username_from_button = extract_username_from_button(event)
            if username_from_button:
                text = f"{username_from_button}\n{text}"
            text = cut_text_before_symbol(text)
        username = f"@{user.username}" if user.username else "–ë–µ–∑ username"
        user_id = user.id

        message = (
            f"üß™ –ù–∞–π–¥–µ–Ω –ª–∏–¥\n"
            f"üë§ {username} (ID: {user_id})\n"
            f"üì¶ {', '.join(matched_keywords)}\n\n"
            f"{text}"
        )

        chat_id = ADMIN_TEST_CHAT_ID if TEST_MODE else ADMIN_CHAT_ID
        await client.send_message(chat_id, message)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–∏–¥–∞: {e}")

def extract_username_from_button(event) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–∑ –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ‚úçÔ∏è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É)
    """
    try:
        buttons = event.message.reply_markup.rows
        for row in buttons:
            for button in row.buttons:
                if button.text.startswith("‚úçÔ∏è") and "t.me/" in button.url:
                    # –í—ã—Ç–∞—â–∏—Ç—å username –∏–∑ —Å—Å—ã–ª–∫–∏
                    return "@" + button.url.split("t.me/")[1].split("?")[0]
    except Exception as e:
        logging.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –∫–Ω–æ–ø–∫–∏: {e}")
    return None

def cut_text_before_symbol(text: str, symbol: str = "‚ûñ") -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî '‚ûñ')"""
    return text.split(symbol)[0].strip()

# —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –≤ –µ–∫—Å–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤
def save_lead_to_project_excel(project_path, sender_id, username, matched_keywords, text, source):
    file_path = os.path.join(project_path, "users_database.xlsx")       
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    if not os.path.exists(file_path):
        workbook = openpyxl.Workbook()
        worksheet = workbook.active
        worksheet.append(["–î–∞—Ç–∞", "ID", "Username", "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "–°–æ–æ–±—â–µ–Ω–∏–µ", "–ò—Å—Ç–æ—á–Ω–∏–∫"])
    else:
        workbook = openpyxl.load_workbook(file_path)
        worksheet = workbook.active

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    existing_texts = [row[4].value for row in worksheet.iter_rows(min_row=2) if row[4].value]
    if text in existing_texts:
        return

    worksheet.append([timestamp, sender_id, username, ", ".join(matched_keywords), text, source])
    workbook.save(file_path)





















# 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–æ–≤ ===
@client.on(events.NewMessage(incoming=True))
async def handle_incoming_message(event):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∏–¥"""
    global messages_analyzed, messages_matched, messages_matched_keywords1

    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –õ–° –∏ –∫–∞–Ω–∞–ª—ã
        if not event.is_group:
            return

        chat_id = event.chat_id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —á–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ü–µ–ª–µ–≤—ã—Ö
        target_chats_path = TARGET_CHATS_TEST_PATH if TEST_MODE else TARGET_CHATS_MAIN_PATH
        try:
            with open(target_chats_path, encoding="utf-8") as f:
                allowed_chats = set(int(line.strip()) for line in f if line.strip().isdigit())
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: {e}")
            allowed_chats = set()

        if chat_id not in allowed_chats:
            logging.debug(f"‚è≠Ô∏è –ß–∞—Ç {chat_id} –Ω–µ –≤ —Ü–µ–ª–µ–≤–æ–º —Å–ø–∏—Å–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫")
            return
        raw_text = event.message.message or ""
        if not raw_text.strip() or len(raw_text) > MAX_MESSAGE_LENGTH:
            logging.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(raw_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        messages_analyzed += 1
        normalized = normalize_text(raw_text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤
        if any(word in normalized for word in STOP_WORDS + STOP_WORDS_PROJECT):
            logging.info(f"üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: {raw_text[:60]}...")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ KEYWORDS_1
        if not any(kw in normalized for kw in KEYWORDS_1):
            return

        messages_matched_keywords1 += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ KEYWORDS_2
        matched_keywords2 = [kw for kw in KEYWORDS_2 if kw in normalized]
        if not matched_keywords2:
            return

        messages_matched += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏
        if is_duplicate_message(normalized):
            logging.info("üîÅ –î—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ –ª–∏–¥
        save_message_to_excel(raw_text, SENT_MESSAGES_PATH)
        sent_texts_keywords1.add(normalized)

        update_hourly_statistics(PROJECT, TEST_MODE)

        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ª–∏–¥: {raw_text[:60]}...")
        logging.info(f"üì¶ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {matched_keywords2}")

        # –ï—Å–ª–∏ –Ω–µ test_mode ‚Äî –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if not TEST_MODE:
            await log_lead_to_admin_chat(event, matched_keywords2)
        else:
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ª–æ–≥–∏–∫–∞
            test_state = increment_test_leads(PROJECT)
            if test_state["limit_reached"]:
                logging.warning("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ª–∏–¥–æ–≤ ‚Äî –ª–∏–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
                return

            try:
                await client.forward_messages(ADMIN_TEST_CHAT_ID, event.message)
                logging.info("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç")
                if test_state["sent"] == TEST_LIMIT:
                    await client.send_message(ADMIN_TEST_CHAT_ID, f"üìõ –ü—Ä–æ–µ–∫—Ç '{PROJECT}' –¥–æ—Å—Ç–∏–≥ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ {TEST_LIMIT} –ª–∏–¥–æ–≤")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–∏–¥–∞: {e}")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_incoming_message: {e}")

# —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º

def load_test_status():
    if os.path.exists(TEST_STATUS_PATH):
        with open(TEST_STATUS_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return {}

def save_test_status(status):
    with open(TEST_STATUS_PATH, "w", encoding="utf-8") as f:
        json.dump(status, f, ensure_ascii=False, indent=2)

def increment_test_leads(project_name):
    status = load_test_status()
    status.setdefault(project_name, {"sent": 0, "limit_reached": False})

    if not status[project_name]["limit_reached"]:
        status[project_name]["sent"] += 1
        if status[project_name]["sent"] >= TEST_LIMIT:
            status[project_name]["limit_reached"] = True
    save_test_status(status)
    return status[project_name]

























# 6. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ (hourly report, –≥—Ä–∞—Ñ–∏–∫)

async def send_hourly_report():
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á—ë—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    stats_file = STATS_HOURLY_TEST_PATH if TEST_MODE else STATS_HOURLY_MAIN_PATH
    stats = read_and_clear_hourly_stats(stats_file)

    if not stats:
        logging.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫")
        return

    try:
        report_lines = ["üìä –ü–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç:"]
        total = 0
        for hour, count in sorted(stats.items()):
            dt = datetime.fromisoformat(hour).strftime("%H:%M")
            report_lines.append(f"‚Ä¢ {dt} ‚Äî {count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            total += count

        report_lines.append(f"\n–í—Å–µ–≥–æ: {total} —Å–æ–æ–±—â–µ–Ω–∏–π")

        report_text = "\n".join(report_lines)
        chat_id = ADMIN_TEST_CHAT_ID if TEST_MODE else ADMIN_CHAT_ID

        await client.send_message(chat_id, report_text)
        logging.info("‚úÖ –ü–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞: {e}")


def build_activity_plot(stats: dict[str, int], output_path: str):
    """–°—Ç—Ä–æ–∏—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º"""
    try:
        if not stats:
            logging.info("üìâ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
            return

        hours = [datetime.fromisoformat(h).strftime("%H:%M") for h in sorted(stats)]
        values = [stats[h] for h in sorted(stats)]

        plt.figure(figsize=(10, 5))
        plt.plot(hours, values, marker="o")
        plt.xticks(rotation=45)
        plt.title("–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º")
        plt.tight_layout()
        plt.savefig(output_path)
        plt.close()

        logging.info(f"üñºÔ∏è –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")


async def send_activity_plot():
    """–°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ —á–∞—Ç"""
    stats_file = STATS_HOURLY_TEST_PATH if TEST_MODE else STATS_HOURLY_MAIN_PATH
    image_path = f"{PROJECT_PATH}/{PROJECT}/activity_plot.png"

    stats = read_and_clear_hourly_stats(stats_file)
    if not stats:
        logging.info("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫")
        return

    build_activity_plot(stats, image_path)

    try:
        chat_id = ADMIN_TEST_CHAT_ID if TEST_MODE else ADMIN_CHAT_ID
        await client.send_file(chat_id, image_path, caption="üìà –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å")
        logging.info("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")


async def scheduler_loop():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    while True:
        now = datetime.now()

        # –ö–∞–∂–¥—ã–π —á–∞—Å ‚Äî –æ—Ç—á—ë—Ç
        if now.minute == 0:
            await send_hourly_report()

        # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 22:00 ‚Äî –≥—Ä–∞—Ñ–∏–∫
        if now.hour == 22 and now.minute == 0:
            await send_activity_plot()

        if now.hour == 18 and now.minute == 0:
            await send_daily_leads_report()

        if now.weekday() == 4 and now.hour == 19 and now.minute == 0:
            await send_weekly_leads_report()

        await asyncio.sleep(60)

async def send_daily_leads_report():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–¥—ã > 0"""
    stats_file = STATS_HOURLY_TEST_PATH if TEST_MODE else STATS_HOURLY_MAIN_PATH
    try:
        if not os.path.exists(stats_file):
            return
        with open(stats_file, "r", encoding="utf-8") as f:
            stats = json.load(f)

        # –°—á–∏—Ç–∞–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–æ—Ç 18:00 –¥–æ 18:00)
        cutoff = datetime.now() - timedelta(days=1)
        total = sum(v for k, v in stats.items() if datetime.fromisoformat(k) >= cutoff)

        if total < 1:
            logging.info("üì≠ –õ–∏–¥–æ–≤ –∑–∞ —Å—É—Ç–∫–∏ < 1 ‚Äî –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
            return

        # –ó–∞–≥—Ä—É–∑–∫–∞ project_config.json –¥–ª—è –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ ID —á–∞—Ç–∞
        project_config_path = f"{PROJECT_PATH}/{PROJECT}/project_config.json"
        if not os.path.exists(project_config_path):
            logging.warning("‚ö†Ô∏è project_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        with open(project_config_path, "r", encoding="utf-8") as f:
            project_config = json.load(f)

        chat_id = project_config.get("report_chat")
        project_name = project_config.get("project_name", PROJECT)

        if chat_id:
            text = f"üìä –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä. –ó–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ {total} –ª–∏–¥–æ–≤"
            await client.send_message(chat_id, text)

            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç ({total} –ª–∏–¥–æ–≤)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_daily_leads_report: {e}")


async def send_weekly_leads_report():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º"""
    stats_file = STATS_HOURLY_TEST_PATH if TEST_MODE else STATS_HOURLY_MAIN_PATH
    try:
        if not os.path.exists(stats_file):
            return
        with open(stats_file, "r", encoding="utf-8") as f:
            stats = json.load(f)

        # –°—á–∏—Ç–∞–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        cutoff = datetime.now() - timedelta(days=7)
        total = sum(v for k, v in stats.items() if datetime.fromisoformat(k) >= cutoff)

        if total < 1:
            logging.info("üì≠ –õ–∏–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é < 1 ‚Äî –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
            return

        project_config_path = f"{PROJECT_PATH}/{PROJECT}/project_config.json"
        if not os.path.exists(project_config_path):
            logging.warning("‚ö†Ô∏è project_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        with open(project_config_path, "r", encoding="utf-8") as f:
            project_config = json.load(f)

        chat_id = project_config.get("report_chat")
        project_name = project_config.get("project_name", PROJECT)

        if chat_id:
            text = f"üìà –ó–∞ –Ω–µ–¥–µ–ª—é –≤ –ø—Ä–æ–µ–∫—Ç–µ '{project_name}' –Ω–∞–π–¥–µ–Ω–æ {total} –ª–∏–¥–æ–≤"
            await client.send_message(chat_id, text)
            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ({total} –ª–∏–¥–æ–≤)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_weekly_leads_report: {e}")














# 7. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª"""
    log_formatter = logging.Formatter("%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s")
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # –õ–æ–≥ –≤ —Ñ–∞–π–ª
    file_handler = logging.FileHandler("search_bot.log", encoding="utf-8")
    file_handler.setFormatter(log_formatter)
    logger.addHandler(file_handler)

    # –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_formatter)
    logger.addHandler(console_handler)

    logging.info("üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")


def initialize_globals():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    global sent_texts_keywords1
    sent_texts_keywords1 = set()

    logging.info("üîÅ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    setup_logging()
    initialize_globals()

    logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –∫–ª–∏–µ–Ω—Ç–∞...")

    try:
        await client.start()
        logging.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        asyncio.create_task(scheduler_loop())
        logging.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

        # –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        logging.info(f"üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ {'–¢–ï–°–¢' if TEST_MODE else '–ë–û–ï–í–û–ú'}")
        await client.run_until_disconnected()

    except Exception as e:
        logging.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ Ctrl+C")
